services:
  postgres:
    image: postgres:17.6
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: redis:7.4
    container_name: redis_cache
    restart: always
    env_file:
      - .env
    volumes:
      - redis_data:/data
    networks:
      - backend

  api:
    build: ./backend
    container_name: backend_api
    restart: always
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}
    ports:
      - "8000:8000"
    networks:
      - backend

  celery:
    build: ./celery
    container_name: celery_worker
    restart: always
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    networks:
      - backend

  frontend:
    build: ./frontend
    container_name: frontend_app
    restart: no
    env_file:
      - .env
    depends_on:
      - api
    ports:
      - "3000:3000"
    networks:
      - frontend
      - backend
  nginx:
    image: nginx:1.28
    container_name: nginx_server
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api
    networks:
      - frontend
      - backend


volumes:
  postgres_data:
  redis_data:

networks:
  backend:
  frontend:
